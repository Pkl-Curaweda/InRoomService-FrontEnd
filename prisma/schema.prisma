generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
}

enum OrderStatus {
  PENDING
  PROCESS
  DELIVERED
  DONE
  CANCEL
}

enum RoomType {
  STANDARD
  DELUXE
  FAMILY
}

enum StatusProductReq {
  PENDING
  REJECTED
  ACCEPTED
}

enum BedType {
  KING
  TWIN
  SINGLE
}

enum GuestResouce {
  WHATSAPP
  WALK_IN
}

enum ArrangmentCode {
  RB
  RO
}

// Front Office Area ==========================================================

model Guest {
  id       Int          @id @default(autoincrement())
  name     String
  contact  String
  username String
  password String
  Tokens   GuestToken[]
  orders   Order[]
  Reserver Reserver[]
}

// This table is for admin & mitra (hotel)
model Role {
  id         Int      @id @default(autoincrement())
  name       String
  users      User[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model User {
  id             Int             @id @default(autoincrement())
  name           String
  gender         Gender
  phone          String
  picture        String
  birthday       DateTime
  nik            String
  email          String          @unique
  username       String          @unique
  password       String
  role           Role            @relation(fields: [roleId], references: [id])
  roleId         Int
  productReqs    ProductReq[]
  cleaningSheets CleaningSheet[]
  cleanRooms     CleanRoom[]
  Tokens         UserToken[]
  DirtyRoom      DirtyRoom[]
  OooRoom        OooRoom[]
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
}

model UserToken {
  id           Int      @id @default(autoincrement())
  refreshToken String   @unique
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  expired_at   DateTime
}

model GuestToken {
  id           Int      @id @default(autoincrement())
  refreshToken String   @unique
  guest        Guest    @relation(fields: [guestId], references: [id])
  guestId      Int
  expired_at   DateTime
}

model RoomCapacity {
  id            Int    @id @default(autoincrement())
  adultCapacity Int
  childCapacity Int
  manyRoom      Int
  Room          Room[]
}

model RoomStatus {
  id               Int    @id @default(autoincrement())
  shortDescription String
  longDescription  String @db.Text
  rowColor         String
  textColor        String
  Room             Room[]
}

model Room {
  id              Int               @id @default(autoincrement())
  roomType        RoomType
  roomImage       String
  roomStatus      RoomStatus        @relation(fields: [roomStatusId], references: [id])
  roomStatusId    Int
  floor           Int
  bedSetup        BedType
  description     String
  roomCapacity    RoomCapacity      @relation(fields: [roomCapacityId], references: [id])
  roomCapacityId  Int
  occupied_status Boolean
  rate            Float
  roomFacilities  RoomFacility[]
  order           Order[]
  resvRooms       ResvRoom[]
  cleaningSheets  CleaningSheet[]
  cleanRooms      CleanRoom[]
  dirtyRooms      DirtyRoom[]
  oooRooms        OooRoom[]
  guestPreference GuestPreference[]
  tasks           Task[]
  roomChangesFrom RoomChange[]      @relation("RoomChangeFrom")
  roomChangeTo    RoomChange[]      @relation("RoomChangeTo")
  lostFounds      lostfound[]
}

model RoomFacility {
  id         Int      @id @default(autoincrement())
  name       String
  room       Room     @relation(fields: [roomId], references: [id])
  roomId     Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Reservation {
  id                 Int               @id @default(autoincrement())
  resvStatus         ResvStatus        @relation(fields: [resvStatusId], references: [id])
  resvStatusId       Int
  arrangmentCode     ArrangmentCode
  specialTreatment   SpecialTreatment? @relation(fields: [specialTreatmentId], references: [id])
  specialTreatmentId Int?
  reserver           Reserver          @relation(fields: [reserverId], references: [id])
  reserverId         Int
  manyAdult          Int
  manyChild          Int
  reservationRemarks String?           @db.Text
  inHouseIndicator   Boolean
  arrivalDate        DateTime          @db.Date
  departureDate      DateTime          @db.Date
  checkInDate        DateTime?         @db.Date
  checkoutDate       DateTime?         @db.Date
  created_at         DateTime          @default(now())
  updated_at         DateTime          @updatedAt
  resvRooms          ResvRoom[]
  cleaningSheets     CleaningSheet[]
  cleanRooms         CleanRoom[]
  dirtyRooms         DirtyRoom[]
  oooRooms           OooRoom[]
  guestPreference    GuestPreference[]
  tasks              Task[]
  roomChangesFrom    RoomChange[]
}

model SpecialTreatment {
  id          Int           @id @default(autoincrement())
  description String
  rowColor    String
  textColor   String
  Reservation Reservation[]
}

model ResvStatus {
  id             Int             @id @default(autoincrement())
  description    String
  rowColor       String
  textColor      String
  reservation    Reservation[]
  cleaningSheets CleaningSheet[]
  cleanRooms     CleanRoom[]
  DirtyRoom      DirtyRoom[]
  OooRoom        OooRoom[]
}

model ResvRoom {
  id            Int         @id @default(autoincrement())
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  reservationId Int
  room          Room        @relation(fields: [roomId], references: [id])
  roomId        Int
  //!Room Maid Relation (underworking) please finish
  roomMaidId    Int
  addedPrice    Float?      @default(0)
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
}

model Reserver {
  id              Int           @id @default(autoincrement())
  guestIdentifier String
  resourceName    String
  guest_id        Guest         @relation(fields: [guestId], references: [id])
  guestId         Int
  reservations    Reservation[]
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
}

model LogAvailability {
  id          Int      @id @default(autoincrement())
  roomHistory Json
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

// End Front Office Area ======================================================

// House Keeping Area =========================================================
model CleaningSheet {
  id            Int         @id @default(autoincrement())
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  reservationId Int
  no            String
  resvStatus    ResvStatus  @relation(fields: [resvStatusId], references: [id])
  resvStatusId  Int
  remark        String
  room          Room        @relation(fields: [roomId], references: [id])
  roomId        Int
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
}

model CleanRoom {
  id            Int         @id @default(autoincrement())
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  reservationId Int
  resvStatus    ResvStatus  @relation(fields: [resvStatusId], references: [id])
  resvStatusId  Int
  description   String      @db.Text
  room          Room        @relation(fields: [roomId], references: [id])
  roomId        Int
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
}

model DirtyRoom {
  id            Int         @id @default(autoincrement())
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  reservationId Int
  resvStatus    ResvStatus  @relation(fields: [resvStatusId], references: [id])
  resvStatusId  Int
  description   String      @db.Text
  room          Room        @relation(fields: [roomId], references: [id])
  roomId        Int
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
}

model OooRoom {
  id            Int         @id @default(autoincrement())
  room          Room        @relation(fields: [roomId], references: [id])
  roomId        Int
  user          User        @relation(fields: [userId], references: [id])
  userId        Int
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  reservationId Int
  reason        String      @db.Text
  from          DateTime
  until         DateTime
  resvStatus    ResvStatus  @relation(fields: [resvStatusId], references: [id])
  resvStatusId  Int
  description   String      @db.Text
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
}

model GuestPreference {
  id            Int         @id @default(autoincrement())
  room          Room        @relation(fields: [roomId], references: [id])
  roomId        Int
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  reservationId Int
  datetime      DateTime
  remark        String
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
}

model RoomChange {
  id            Int         @id @default(autoincrement())
  roomFrom      Room        @relation(name: "RoomChangeFrom", fields: [roomFromId], references: [id])
  roomFromId    Int
  roomTo        Room        @relation(name: "RoomChangeTo", fields: [roomToId], references: [id])
  roomToId      Int
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  reservationId Int
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
}

model Task {
  id            Int         @id @default(autoincrement())
  room          Room        @relation(fields: [roomId], references: [id])
  roomId        Int
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  reservationId Int
  departement   Departement @relation(fields: [departementId], references: [id])
  departementId Int
  from          DateTime
  to            DateTime
  done          Boolean
  note          String      @db.Text
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
}

model Departement {
  id    Int    @id @default(autoincrement())
  name  String
  tasks Task[]
}

model vip {
  id             Int    @id @default(autoincrement())
  res_no         String
  qty            Int
  // category enum
  //res_status enum
  argt_code      String
  description    String @db.Text
  a              String
  co             String
  room_id        Int
  reservation_id Int
}

model purchase {
  id          Int      @id @default(autoincrement())
  stock_id    Int
  number      String
  issue       DateTime
  art_no      String
  user_id     Int
  description String   @db.Text
  qty         Int
  date        DateTime
  d_unit      String
  cont        String
  po          String
}

model stock {
  id          Int    @id @default(autoincrement())
  article     String @db.Text
  description String @db.Text
  unit        String
  qty         Int
  content     String
  d_unit      String
}

model extrabed {
  id      Int      @id @default(autoincrement())
  room_id Int
  date    DateTime
  // used String
  remain  Int
}

model lostfound {
  id          Int      @id @default(autoincrement())
  room        Room     @relation(fields: [roomId], references: [id])
  roomId      Int
  reference   String
  time        DateTime
  reported    DateTime
  location    String
  description String   @db.Text
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

// End House Keeping Area =====================================================

// In Room Service Area =======================================================

model ServiceType {
  id         Int          @id @default(autoincrement())
  name       String
  open       String
  close      String
  services   Service[]
  subTypes   SubType[]
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  ProductReq ProductReq[]
}

model SubType {
  id            Int          @id @default(autoincrement())
  name          String
  serviceType   ServiceType  @relation(fields: [serviceTypeId], references: [id])
  serviceTypeId Int
  services      Service[]
  productReqs   ProductReq[]
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
}

model Service {
  id            Int           @id @default(autoincrement())
  name          String
  price         Int
  desc          String
  picture       String
  serviceType   ServiceType   @relation(fields: [serviceTypeId], references: [id])
  serviceTypeId Int
  subType       SubType       @relation(fields: [subTypeId], references: [id])
  subTypeId     Int
  orderDetails  OrderDetail[]
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
}

model ProductReq {
  id               Int              @id @default(autoincrement())
  title            String
  user             User             @relation(fields: [userId], references: [id])
  userId           Int
  type             SubType          @relation(fields: [typeId], references: [id])
  typeId           Int
  desc             String
  price            Int
  picture          String
  statusProductReq StatusProductReq @default(PENDING)
  serviceType      ServiceType      @relation(fields: [serviceTypeId], references: [id])
  serviceTypeId    Int
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
}

model PaymentMethod {
  id         Int       @id @default(autoincrement())
  name       String
  payments   Payment[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model Payment {
  id              Int           @id @default(autoincrement())
  name            String
  code            String
  params          String?
  paymentMethod   PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId Int
  transactions    Transaction[]
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
}

model Transaction {
  id         String        @id
  name       String
  status     PaymentStatus
  payment    Payment       @relation(fields: [paymentId], references: [id])
  paymentId  Int
  order      Order?
  created_at DateTime      @default(now())
  expired_at DateTime?
  updated_at DateTime      @updatedAt
}

model Order {
  id            String        @id
  guest         Guest         @relation(fields: [guestId], references: [id])
  guestId       Int
  room          Room          @relation(fields: [roomId], references: [id])
  roomId        Int
  subtotal      Float
  total         Float
  ppn           Float
  fees          Float
  transaction   Transaction   @relation(fields: [transactionId], references: [id])
  transactionId String        @unique
  orderDetails  OrderDetail[]
  orderTracks   OrderTrack[]
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
}

model OrderTrack {
  id         Int         @id @default(autoincrement())
  order      Order       @relation(fields: [orderId], references: [id])
  orderId    String
  status     OrderStatus @default(PENDING)
  time       DateTime    @default(now())
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt

  @@unique([orderId, status])
}

model OrderDetail {
  id         Int      @id @default(autoincrement())
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String
  service    Service  @relation(fields: [serviceId], references: [id])
  serviceId  Int
  price      Float
  qty        Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

// End In Room Service Area ===================================================
